# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

# TODO: Remove at least umc-server-postgresql-credentails and use the one created by the subchart instead.

{{ if .Values.postgresql.enabled }}
{{- $nubusMasterPassword := include "nubusTemplates.masterPassword" . -}}
{{- $nubusSecrets := list
  (dict "name" "postgresql-credentials" "stringData" (dict
    "admin_password" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "postgresql-admin") | sha1sum | quote)
    "user_password" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "postgresql-user") | sha1sum | quote)
    "replication_password" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "postgresql-replication") | sha1sum | quote)
  ))
  (dict "name" "umc-server-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusUmcServer.postgresql.selfservice.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "umc-server") | sha1sum) | quote)
  ))
  (dict "name" "umc-server-session-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusUmcServer.postgresql.authSession.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "umc-server-session") | sha1sum) | quote)
  ))
  (dict "name" "notifications-api-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusNotificationsApi.postgresql.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "notifications-api") | sha1sum) | quote)
  ))
  (dict "name" "keycloak-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.keycloak.postgresql.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "keycloak") | sha1sum) | quote)
  ))
  (dict "name" "keycloak-extensions-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusKeycloakExtensions.postgresql.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "keycloak-extensions") | sha1sum) | quote)
  ))
  (dict "name" "guardian-management-api-postgresql-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusGuardian.postgresql.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "guardian-management-api") | sha1sum) | quote)
  ))
-}}

{{- range $secret := $nubusSecrets }}
---
kind: "Secret"
apiVersion: "v1"
type: {{ .type | default "Opaque" | quote }}
metadata:
  name: {{ printf "%s-%s" $.Release.Name .name | quote }}
  namespace: {{ include "common.names.namespace" $ | quote }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if $.Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if $.Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
{{- if .data }}
data:
{{- range $k, $v := .data }}
  {{ $k }}: {{ $v | quote }}
{{- end }}
{{- end }}
{{- if .stringData }}
stringData:
{{- range $k, $v := .stringData }}
  {{ $k }}: {{ $v }}
{{- end }}
{{- end }}
...
{{- end }}
{{- end }}
