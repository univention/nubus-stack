# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

# TODO: Move memcached password over to the umc-server chart

{{- $nubusMasterPassword := include "nubusTemplates.masterPassword" . -}}
{{- $nubusSecrets := list
  (dict "name" "nubus-credentials" "stringData" (dict
    "administrator_password" (tpl .Values.nubusStackDataUms.templateContext.initialPasswordAdministrator . | quote )
  ))

  (dict "name" "keycloak-credentials" "stringData" (dict
    "admin_password" (coalesce .Values.keycloak.keycloak.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "keycloak-admin") | sha1sum | quote))
  ))
  (dict "name" "keycloak-extensions-smtp-credentials" "stringData" (dict
      "password" (coalesce .Values.nubusKeycloakExtensions.smtp.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "keycloak-extensions") | sha1sum) | quote)
  ))

  (dict "name" "readonly-ldap-credentials" "stringData" (dict
      "password" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "readonly") | sha1sum | quote)
  ))

  (dict "name" "umc-server-memcached-credentials" "stringData" (dict
      "memcached-password" (coalesce .Values.nubusUmcServer.memcached.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "umc-server") | sha1sum) | quote)
  ))
  (dict "name" "provisioning-udm-listener-ldap-tls" "stringData" (dict
    "ca.crt" ""
    "tls.key" ""
    "tls.crt" ""
  ))

  (dict "name" "provisioning-nats-credentials" "stringData" (dict
    "admin_password" (coalesce (.Values.nubusProvisioning.nats.auth).adminPassword (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-nats") | sha1sum)) | quote)
  ))
  (dict "name" "provisioning-api-credentials" "stringData" (dict
    "NATS_PASSWORD" (coalesce .Values.nubusProvisioning.api.nats.auth.password (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-api") | sha1sum)) | quote)
  ))
  (dict "name" "provisioning-dispatcher-credentials" "stringData" (dict
    "NATS_USER" "dispatcher"
    "NATS_PASSWORD" (coalesce .Values.nubusProvisioning.dispatcher.nats.auth.password (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-dispatcher") | sha1sum)) | quote)
  ))
  (dict "name" "provisioning-prefill-credentials" "stringData" (dict
    "NATS_USER" "prefill"
    "NATS_PASSWORD" (coalesce .Values.nubusProvisioning.prefill.nats.auth.password (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-prefill") | sha1sum)) | quote)
  ))
  (dict "name" "provisioning-udm-listener-credentials" "stringData" (dict
    "NATS_PASSWORD" (coalesce .Values.nubusUdmListener.nats.auth.password (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-udm-listener") | sha1sum)) | quote)
  ))
  (dict "name" "provisioning-udm-transformer-credentials" "stringData" (dict
    "NATS_USER" "udmtransformer"
    "NATS_PASSWORD" (coalesce .Values.nubusProvisioning.udmTransformer.nats.auth.password (printf "nbs_%s" (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "provisioning-udm-transformer") | sha1sum)) | quote)
  ))

  (dict "name" "guardian-keycloak-client-secret" "stringData" (dict
    "oauthAdapterM2mSecret" (coalesce .Values.nubusGuardian.managementApi.oauth.auth.password (print (derivePassword 1 "long" $nubusMasterPassword "nubus" "guardian-keycloak-client-secret") | sha1sum) | quote)
  ))

-}}

{{- if not .Values.nubusKeycloakBootstrap.ldap.auth.password }}
{{- $nubusSecrets = append $nubusSecrets (dict "name" "keycloak-bootstrap-ldap-credentials" "stringData" (dict
      "password" ( (include "nubusTemplates.credentials.ldap.users.readonly.password" . ) | quote )
  ))
}}
{{- end }}

{{- range $secret := $nubusSecrets }}
---
kind: "Secret"
apiVersion: "v1"
type: {{ .type | default "Opaque" | quote }}
metadata:
  name: {{ printf "%s-%s" $.Release.Name .name | quote }}
  namespace: {{ include "common.names.namespace" $ | quote }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if $.Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if $.Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
{{- if .data }}
data:
{{- range $k, $v := .data }}
  {{ $k }}: {{ $v | quote }}
{{- end }}
{{- end }}
{{- if .stringData }}
stringData:
{{- range $k, $v := .stringData }}
  {{ $k }}: {{ $v }}
{{- end }}
{{- end }}
...
{{- end }}
