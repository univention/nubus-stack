# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH
---
global:
  # -- Indicates to all subcharts that they are being used as part of a Nubus deployment.
  nubusDeployment: true
  secrets:
    # -- Master password from which other passwords are derived.
    masterPassword: ""

  # -- Domain of the deployment
  domain: ""
  subDomains:
    portal: portal
    keycloak: id
    scim: scim

  ingressClass: ""
  # -- Cert manager issuer of the cluster
  certManagerIssuer: ""

  ldap:
    baseDn: ""
    # -- Domain of the ldap server
    domainName: ""
    connection:
      host: "{{ .Release.Name }}-ldap-server"
    auth:
      admin:
        existingSecret:
          name: "{{ .Release.Name }}-ldap-server-admin"

  memcached:
    connection:
      host: ""
    auth:
      username: ""

  postgresql:
    connection:
      host: "{{ .Release.Name }}-postgresql"

  udm:
    connection:
      # -- Global default for the URL via which the UDM Rest API can be reached.
      # In transition state, not all subcharts do make use of this yet.
      url: "http://{{ .Release.Name }}-udm-rest-api:9979/udm/"

  keycloak:
    realm: "nubus"

  # -- Allow plain UMC login (otherwise only SAML login is possible)
  # Be aware this will expose the UMC login page to the public, which can
  # circumvent 2FA and other security measures placed in the IdP.
  enablePlainUmcLogin: false

  configMapUcr: "{{ .Release.Name }}-stack-data-ums-ucr"

  configUcr:
    ldap:
      # -- Indexes for the LDAP database
      index:
        eq: aRecord,automountInformation,cNAMERecord,cn,description,dhcpHWAddress,displayName,entryUUID,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,objectClass,ou,pTRRecord,relativeDomainName,sambaAcctFlags,sambaDomainName,sambaGroupType,sambaPrimaryGroupSID,sambaSID,sambaSIDList,secretary,shadowExpire,sn,uid,uidNumber,uniqueMember,univentionCanonicalRecipientRewriteEnabled,univentionDataType,univentionInventoryNumber,univentionLicenseModule,univentionLicenseObject,univentionMailHomeServer,univentionNagiosHostname,univentionObjectFlag,univentionObjectType,univentionPolicyReference,univentionServerRole,univentionService,univentionShareGid,univentionShareSambaName,univentionShareWriteable,univentionUDMOptionModule,univentionUDMPropertyCLIName,univentionUDMPropertyCopyable,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName,univentionObjectIdentifier
        pres: aRecord,automountInformation,cn,description,dhcpHWAddress,displayName,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,name,objectClass,ou,relativeDomainName,shadowMax,sn,uid,uidNumber,uniqueMember,univentionMailHomeServer,univentionObjectFlag,univentionPolicyReference,univentionUDMPropertyCLIName,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName,univentionObjectIdentifier
        approx: cn,givenName,mail,sn,uid
        sub: aRecord,associatedDomain,automountInformation,cn,default,description,displayName,employeeNumber,givenName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,name,ou,pTRRecord,printerModel,relativeDomainName,sambaSID,sn,uid,univentionInventoryNumber,univentionOperatingSystem,univentionSyntaxDescription,univentionUDMPropertyLongDescription,univentionUDMPropertyShortDescription,zoneName

  # -- Extensions to load. Add entries to load additional extensions into Nubus.
  extensions: []

  # -- Allows to configure the system extensions to load. This is intended for
  # internal usage, prefer to use `global.extensions` for user configured
  # extensions.
  systemExtensions:
    - name: "portal"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/portal-extension"
        imagePullPolicy: "IfNotPresent"
        tag: "0.80.2@sha256:cde5547ef1c2d5da55fb41bdae7248ba8514ab4f200822709ca9a99f483a1cc8"
    - name: "2fa-helpdesk"
      image:
        registry: "artifacts.software-univention.de"
        repository: "nubus/images/twofa-helpdesk-extensions"
        imagePullPolicy: "IfNotPresent"
        tag: "0.14.1@sha256:3d07949f50f65f1294bb349c8196c475b5b9cd34e6ed90fe24474e88e94f5999"

# -- Additional custom annotations to add to all objects deployed directly by the umbrella chart.
additionalAnnotations: {}

# -- Additional custom labels to add to all objects deployed directly by the umbrella chart.
additionalLabels: {}

# -- SAML certificates generation
certificates:
  # -- Enable SAML self-signed certificate generation. This requires cert-manager.io
  enabled: true

# -- Configure supporting Ingress resources created directly by the umbrella chart.
#
# The "enabled" attribute has been split, so that it is easier to enabled or
# disable individual resources. They are organized according to the pattern
# "{purpose}.enabled".
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Serve an icon on the path "/favicon.ico" if enabled.
  favicon:
    enabled: true

  # -- Serve dynamic portal assets (icons, logos, background images) out of the
  # MinIO bucket "portal-assets".
  #
  # This is intended to be used together with the bundled minio. If an external
  # S3-compatible store is used then a potentially needed Ingress resource as to
  # be set up by the operator.
  minio:
    enabled: false

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: ""

  # -- Request certificates via cert-manager.io annotation
  certManager:
    # -- Enable cert-manager.io annotaion.
    enabled: true

    # Issuer reference.
    issuerRef:
      # -- Name of cert-manager.io Issuer resource.
      name: ""
      # -- Type of Issuer, f.e. "Issuer" or "ClusterIssuer".
      kind: "ClusterIssuer"

  # -- The Ingress controller class name.
  ingressClassName: ""
  # -- Define custom ingress annotations.
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "64k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "128k"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/affinity: "none"

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

nubusDevelopment:
  resources: &nubusDevelopmentResources
    limits:
      cpu: 288
      memory: "1Gi"
    requests:
      cpu: "10m"
      memory: "16Mi"
  terminationGracePeriodSeconds: &nubusTerminationGracePeriodSeconds 5

postgresql:
  # -- Enable bundled PostgreSQL database. Disable when using an external database.
  # See demo-values.yaml and prod-values.yaml for examples.
  enabled: false

minio:
  # -- Enable bundled MinIO object storage. Disable when using an external S3-compatible object store.
  # See demo-values.yaml and prod-values.yaml for examples.
  enabled: false

keycloak:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  enabled: true
  resources: *nubusDevelopmentResources
  replicaCount: 1
  keycloak:
    auth:
      username: "kcadmin"
      password: null
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
  config:
    logLevel: "INFO" # default loglevel (subchart): INFO
  ingress:
    enabled: true

nubusGuardian: &nubusGuardian
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "guardian"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  authorizationApi:
    udm:
      auth:
        username: 'cn=admin'
        existingSecret:
          name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
  managementApi:
    oauth:
      auth:
        existingSecret:
          name: '{{- printf "%s-guardian-keycloak-client-secret" .Release.Name -}}'
          keyMapping:
            clientSecret: 'oauthAdapterM2mSecret'
  provisioning:
    enabled: true
    keycloak:
      auth:
        username: "kcadmin"
        existingSecret:
          name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
          keyMapping:
            password: "admin_password"

nubusTwofaHelpdesk: &nubusTwofaHelpdesk
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "helpdesk"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
    certManager:
      enabled: true
    tls:
      secretName: "{{ .Release.Name }}-twofa-backend-api-tls"

  nubusBaseUrl: '{{ printf "%s.%s" .Values.global.subDomains.portal .Values.global.domain }}'
  provisioning:
    enabled: true

  keycloak:
    realm: "{{ .Values.global.keycloak.realm }}"
    admin_realm: "master"
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
    connection:
      url: "https://{{ .Values.global.subDomains.keycloak }}.{{ .Values.global.domain }}"
      host: "{{ .Release.Name }}-keycloak"
  twofaHelpdeskFrontend:
    config:
      postLogoutRedirectURI: '{{ printf "https://%s.%s/" .Values.global.subDomains.portal .Values.global.domain }}'
      enableSelfService: false
      enableAdminHelpdesk: true

nubusLdapNotifier: &nubusLdapNotifier
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "ldap-notifier"
  enabled: true
  resources: *nubusDevelopmentResources

nubusLdapServer: &nubusLdapServer
  nameOverride: "ldap-server"
  enabled: true
  replicaCountPrimary: 1
  replicaCountSecondary: 1
  replicaCountProxy: 1
  resourcesPrimary: *nubusDevelopmentResources
  resourcesSecondary: *nubusDevelopmentResources
  resourcesProxy: *nubusDevelopmentResources

nubusLicenseImport:
  enabled: false
  nameOverride: "license-import"
  ldap:
    connection:
      host: "{{ .Release.Name }}-ldap-server"
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

nubusNotificationsApi: &nubusNotificationsApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "notifications-api"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"

nubusPortalFrontend: &nubusPortalFrontend
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-frontend"
  enabled: true
  resources: *nubusDevelopmentResources
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"

nubusPortalConsumer: &nubusPortalConsumer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-consumer"
  enabled: true
  resources: *nubusDevelopmentResources
  ldap:
    connection:
      # NOTE: Special case, we want to be sure that the consumer is talking to
      # the primary ldap server. This way there is no race condition between the
      # provisioning event and the update of the secondary ldap servers.
      host: "{{ .Release.Name }}-ldap-server-primary"
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
  provisioningApi:
    connection:
      url: "http://{{ .Release.Name }}-provisioning-api"
  udm:
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

nubusPortalServer: &nubusPortalServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "portal-server"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  udm:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-stack-data-ums-svc-portal-server"


nubusProvisioning: &nubusProvisioning
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning"

  enabled: true
  resources:
    dispatcher: *nubusDevelopmentResources
    prefill: *nubusDevelopmentResources
    api: *nubusDevelopmentResources

  nats:
    auth:
      adminPassword: null
    config:
      cluster:
        # TODO: Set back to the default of 3 after nats clustering is solved.
        replicas: 1
      createUsers:
        udmListener:
          user: "udmlistener"
          password: "$NATS_UDM_LISTENER_PASSWORD"
          permissions:
            publish: ">"
            subscribe: ">"
    extraEnvVars:
      - name: NATS_UDM_LISTENER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-udm-listener-credentials"
            key: NATS_PASSWORD
      - name: NATS_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-nats-credentials"
            key: admin_password
      - name: NATS_PROVISIONING_API_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-api-credentials"
            key: NATS_PASSWORD
      - name: NATS_DISPATCHER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-dispatcher-credentials"
            key: NATS_PASSWORD
      - name: NATS_UDM_TRANSFORMER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-udm-transformer-credentials"
            key: NATS_PASSWORD
      - name: NATS_PREFILL_PASSWORD
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-provisioning-prefill-credentials"
            key: NATS_PASSWORD
    global:
      imageRegistry: "docker.io"
    resources: *nubusDevelopmentResources
    reloader:
      resources: *nubusDevelopmentResources
    natsBox:
      resources: *nubusDevelopmentResources

  registerConsumers:
    createUsers:
      portalConsumer:
        existingSecret:
          name: "{{ .Release.Name }}-portal-consumer-provisioning-api"
      selfserviceConsumer:
        existingSecret:
          name: "{{ .Release.Name }}-selfservice-listener-provisioning-api"
    udm:
      auth:
        existingSecret:
          name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

  api:
    nats:
      auth:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-api-credentials"
          keyMapping:
            password: "NATS_PASSWORD"

  dispatcher:
    nats:
      auth:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-dispatcher-credentials"
          keyMapping:
            password: "NATS_PASSWORD"
  prefill:
    nats:
      auth:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-prefill-credentials"
          keyMapping:
            password: "NATS_PASSWORD"
    udm:
      auth:
        existingSecret:
          name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

  udmTransformer:
    ldap:
      connection:
        # NOTE: Special case, we want to be sure that the udm-transformer is
        # talking to the primary ldap server. This way there is no race
        # condition between the provisioning event and the update of the
        # secondary ldap servers.
        host: "{{ .Release.Name }}-ldap-server-primary"
      auth:
        existingSecret:
          name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
    nats:
      auth:
        existingSecret:
          name: "{{ .Release.Name }}-provisioning-udm-transformer-credentials"
          keyMapping:
            password: "NATS_PASSWORD"

nubusUdmListener: &nubusUdmListener
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "provisioning-udm-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  ldap:
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
  nats:
    connection:
      host: "{{ .Release.Name }}-provisioning-nats"
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-provisioning-udm-listener-credentials"
        keyMapping:
          password: "NATS_PASSWORD"
  provisioningApi:
    auth:
      existingSecret:
        name: "{{ .Release.Name }}-provisioning-api-events"

nubusSelfServiceConsumer: &nubusSelfServiceConsumer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "selfservice-listener"
  enabled: true
  resources: *nubusDevelopmentResources
  provisioningApi:
    connection:
      url: "http://{{ .Release.Name }}-provisioning-api"
  umc:
    connection:
      url: "http://{{ .Release.Name }}-umc-server"

nubusUdmRestApi: &nubusUdmRestApi
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "udm-rest-api"
  enabled: true
  ingress:
    enabled: false
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  ldap:
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

nubusUmcGateway: &nubusUmcGateway
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-gateway"
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources

nubusUmcServer: &nubusUmcServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "umc-server"
  replicaCount: 1
  enabled: true
  ingress:
    host: "{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}"
  resources: *nubusDevelopmentResources
  global:
    imageRegistry: "docker.io"
  image:
    registry: "artifacts.software-univention.de"
  ldap:
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
  memcached:
    nameOverride: "umc-server-memcached"
    containerSecurityContext:
      readOnlyRootFilesystem: false
    auth:
      existingPasswordSecret: '{{ printf "%s-umc-server-memcached-credentials" .Release.Name }}'
      existingSecret:
        name: '{{ printf "%s-umc-server-memcached-credentials" .Release.Name }}'
        keyMapping:
          password: "memcached-password"
  postgresql:
    authSession:
      connection:
        host: '{{ include "nubusTemplates.connections.postgres.host" . }}'
        port: '{{ include "nubusTemplates.connections.postgres.port" . }}'
  umcServer:
    certPemFile: "/var/secrets/ssl/tls.crt"
    privateKeyFile: "/var/secrets/ssl/tls.key"
    oidcClient:
      auth:
        existingSecret:
          name: "{{ .Release.Name }}-keycloak-bootstrap-oidc-rp-umc-server"
  extraVolumes:
    - name: "certificates"
      secret:
        secretName: "{{ .Release.Name }}-saml-tls"
  extraVolumeMounts:
    - name: "certificates"
      mountPath: "/var/secrets/ssl"

nubusKeycloakBootstrap: &nubusKeycloakBootstrap
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-bootstrap"
  enabled: true
  resources: *nubusDevelopmentResources
  bootstrap:
    twoFactorAuthentication:
      enabled: true
      group: "2FA Users"
  ldap:
    auth:
      bindDn: '{{ include "nubus.keycloak.ldap.auth.bindDn" . }}'
      existingSecret:
        name: '{{- printf "%s-keycloak-bootstrap-ldap-credentials" .Release.Name -}}'
  keycloak:
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"

nubusKeycloakExtensions: &nubusKeycloakExtensions
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "keycloak-extensions"
  enabled: false
  resources: *nubusDevelopmentResources
  smtp:
    connection:
      host: ""
    auth:
      username: "keycloak-extensions"
      existingSecret:
        name: '{{- printf "%s-keycloak-extensions-smtp-credentials" .Release.Name -}}'
  keycloak:
    connection:
      host: ""
    auth:
      username: "kcadmin"
      existingSecret:
        name: '{{- printf "%s-keycloak-credentials" .Release.Name -}}'
        keyMapping:
          adminPassword: "admin_password"
  handler:
    appConfig:
      logLevel: "INFO" # default loglevel (subchart): DEBUG
      newDeviceLoginNotificationEnable: "True"
      emailNotificationTimezone: "UTC"
  proxy:
    appConfig:
      logLevel: "info" # default loglevel (subchart): debug

nubusStackDataUms:
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "stack-data-ums"
  enabled: true
  resources: *nubusDevelopmentResources
  udm:
    auth:
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"

  nubusUmcServer:
    host: '{{ printf "%s-umc-server" .Release.Name }}'
    postgresql:
      connection:
        host: '{{ include "nubusTemplates.connections.postgres.host" . }}'
        port: '{{ include "nubusTemplates.connections.postgres.port" . }}'
    memcached:
      auth:
        username: selfservice
      connection:
        host: '{{ printf "%s-umc-server-memcached" .Release.Name }}'
  stackDataContext:
    ldapMasterHost: '{{ include "nubusTemplates.connections.ldap.primary.host" . }}'
    ldapHost: '{{ include "nubusTemplates.connections.ldap.primary.host" . }}'

  templateContext:
    readonlyUserPassword: '{{ include "nubusTemplates.credentials.ldap.users.readonly.password" . }}'
    portalTwoFaLinkBase: 'https://{{ .Values.global.subDomains.portal }}.{{ .Values.global.domain }}'
    twofaSelfserviceTileCategory: "domain-service"
    twofaAdminTileCategory: "domain-admin"
    portalTwoFaAllowedGroups:
      - "Domain Admins"
    # -- Creates the Portal Tile for the 2FA admin helpdesk.
    twofaAdminHelpdeskActivated: true
    # -- Creates the Portal Tile for the 2FA self-service.
    twofaSelfServiceActivated: false

nubusScimServer: &nubusScimServer
  terminationGracePeriodSeconds: *nubusTerminationGracePeriodSeconds
  nameOverride: "scim-server"
  enabled: false
  resources: *nubusDevelopmentResources
  config:
    host: "https://{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"
    # -- Available log levels are:
    # TRACE, DEBUG, INFO, SUCCESS, WARNING, ERROR, CRITICAL
    #
    # For detailed information please have a look at the loguru documentation: https://loguru.readthedocs.io/en/stable/api/logger.html#levels
    logLevel: "INFO"
    corsOrigins: '["https://{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"]'
    auth:
      enabled: true
      allowedAudience: 'scim-api-access'
      allowedClientId: 'scim-client'
    externalId:
      userMapping: null
      groupMapping: null
    roles:
      userMapping: null
  keycloak:
    connection:
      url: "https://{{ .Values.global.subDomains.keycloak }}.{{ .Values.global.domain }}"
      realm: "{{ .Values.global.keycloak.realm }}"
  docu:
    enabled: false
  udm:
    connection:
      url: '{{ include "nubusTemplates.udmRestApi.uri" . }}'
    auth:
      username: "cn=admin"
      existingSecret:
        name: "{{ tpl .Values.global.ldap.auth.admin.existingSecret.name . }}"
  ingress:
    enabled: true
    host: "{{ .Values.global.subDomains.scim }}.{{ .Values.global.domain }}"
    certManager:
      enabled: true
      issuerRef:
        name: ""
        kind: "ClusterIssuer"
    tls:
      enabled: true

# Allows for creation of additional secrets, for example containing credentials for third party services.
extraSecrets: []
