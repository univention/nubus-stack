# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

---
include:
  - project: "univention/dev/nubus-for-k8s/common-ci"
    ref: "v1.42.1"
    file:
      - "defaults/nubus-workflow.yaml"
  - local: '.gitlab-ci/toggle-base-jobs.yaml'

stages:
  - prepare
  - deploy
  - test
  - test-toggles
  - cleanup

.check-variables:
  before_script:
    # kubernets has a 63 chars limit for namespaces so make sure we do not exceed this
    - export DEPLOY_NAMESPACE="${DEPLOY_NAMESPACE:0:63}"
    # urllib (idna) has a char limit of 63 and some tests add -maildev to the url
    # so limit chars ro 63 - 8
    # Remove chars in the middle, to make sure resulting string is a valid URL
    - |-
        max_length=55
        if [[ ${#DEPLOY_SUBDOMAIN} -gt ${max_length} ]]; then
            suffix_length=10
            suffix=${DEPLOY_SUBDOMAIN:(-${suffix_length})}
            export DEPLOY_SUBDOMAIN="${DEPLOY_SUBDOMAIN:0:$((max_length - suffix_length - 3))}zzz${suffix}"
        fi

pipline-configuration:
  stage: prepare
  extends: .check-variables
  script:
    - echo "${DEPLOY_NAMESPACE}"
    - echo "${DEPLOY_SUBDOMAIN}"
    - echo "${RELEASE_VERSION}"
    - echo "${SEMANTIC_VERSION}"
    - echo "${TESTRUNNER_VERSION}"
    - echo "ENVIRONMENT_SUFFIX=${ENVIRONMENT_SUFFIX:-}"
  variables:
    GIT_STRATEGY: none

deploy-gaia:
  stage: "deploy"
  extends: .check-variables
  image: "ghcr.io/helmfile/helmfile:v1.1.4\
          @sha256:a49a91071567f3b3e5ee45e08bba25fe96b90d12c194ac10178c073453cd00f1"
  script:
    # Prepare
    - export CHART_VERSION=${RELEASE_VERSION}
    - export REVIEW_PREFIX=${DEPLOY_SUBDOMAIN}
    # Ensure cleanup
    - >
      kubectl delete namespace "${DEPLOY_NAMESPACE}"
      --wait
      --timeout=600s
      --ignore-not-found
    # Deploy via ci/helmfile
    - pushd ci
    # TODO: There is an issue around the call to "helm diff". Using "apply"
    # would be preferred since it gives a nice diff of the changes.
    #
    # See: https://github.com/databus23/helm-diff/issues/460
    - helmfile --debug -n "${DEPLOY_NAMESPACE}" --state-values-set toggles.externalDependencies=${EXTERNAL_DEPENDENCIES:-false} --state-values-set toggles.customSecretValues=${PROVIDED_SECRET_VALUES:-false} sync
    - popd
  environment:
    name: ${CI_COMMIT_REF_SLUG}/nubus-with-extensions${ENVIRONMENT_SUFFIX}
    url: https://${DEPLOY_SUBDOMAIN}.portal.review.univention.dev
    on_stop: stop-deployment
    auto_stop_in: 3 hours
    deployment_tier: development
  resource_group: gaia-${DEPLOY_NAMESPACE}
  artifacts:
    reports:
      dotenv: deploy.env

configure-tests:
  stage: deploy
  extends: .check-variables
  image: "ghcr.io/helmfile/helmfile:v0.167.1\
          @sha256:414cb074a0da0f457129590c39d96575fbdcdb7ce75bf0d2b30f05e835947d76"
  needs:
    - deploy-gaia
  script:
    # Grab the e2e-tests sources to use the discovery script
    - "[ ! -e e2e-tests ]"
    - >
      git clone
      --depth 1
      --branch "${TESTRUNNER_CONFIGURATION_BRANCH}"
      https://git.knut.univention.de/univention/dev/nubus-for-k8s/e2e-tests.git
    # Grab the pytest configuration
    - pushd ./e2e-tests
    - source ./discover-env-from-cluster.sh
    - popd
    - echo "PYTEST_ADDOPTS=$PYTEST_ADDOPTS" > deploy.env
    - |
      echo "KC_ADMIN_USERNAME=$(echo $PYTEST_ADDOPTS | sed -n 's/.*--kc-admin-username=\([^ ]*\).*/\1/p')" >> deploy.env
      echo "KC_ADMIN_PASSWORD=$(echo $PYTEST_ADDOPTS | sed -n 's/.*--kc-admin-password=\([^ ]*\).*/\1/p')" >> deploy.env
      echo "UDM_ADMIN_PASSWORD=$(echo $PYTEST_ADDOPTS | sed -n 's/.*--admin-password=\([^ ]*\).*/\1/p')" >> deploy.env
      echo "LDAP_CREDENTIALS_SECRET_NAME=$LDAP_CREDENTIALS_SECRET_NAME" >> deploy.env
      echo "LDAP_CREDENTIALS_SECRET_KEY=$LDAP_CREDENTIALS_SECRET_KEY" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

wait-for-nubus-to-be-ready:
  stage: deploy
  extends: .check-variables
  needs:
    - job: configure-tests
      artifacts: true
  image: "gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/e2e-tests/e2e-tests-runner:${TESTRUNNER_VERSION}"
  script:
    - pushd /e2e
    - LOG_LEVEL="INFO" TIMEOUT=600 ./tests-env-ready/all_pods_ready.py
    - pytest tests/portal/test_nubus_ready.py --log-cli-level=DEBUG
      --showlocals
      --self-contained-html
      --verbose
      --video=retain-on-failure
      --tracing=retain-on-failure
      --screenshot=only-on-failure
      || exit_code=$?
    - popd
    # NOTE: This is a workaround. Our testrunner image does not yet support to
    # run the tests in a different directory than "/e2e". So we copy the reports
    # back into the CI_PROJECT_DIR for Gitlab to accept them as artifacts.
  after_script:
    - mkdir -p /e2e/test-results
    - cp -a /e2e/test-results .
    - exit $exit_code
  artifacts:
    expose_as: "report"
    paths:
      - "${CI_PROJECT_DIR}/report.html"
      - "${CI_PROJECT_DIR}/test-results/"
    when: "always"
    expire_in: "1 week"

create-scim-client:
  stage: test
  extends: .check-variables
  needs:
    - configure-tests
    - wait-for-nubus-to-be-ready
  image: "ubuntu:22.04"
  before_script:
    - apt-get update && apt-get install -y curl jq
    # Make sure not to override the before_script from .check-variables
    - !reference [".check-variables", "before_script"]
    # KEYCLOAK_BASE_URL is modified in the .check-variables,before_script so we can't set in in variables
    - export KEYCLOAK_BASE_URL="https://${DEPLOY_SUBDOMAIN}.id.review.univention.dev"
  script:
    - chmod +x ci/create-scim-client.sh
    - ci/create-scim-client.sh
    - echo "CLIENT_SECRET=$(cat scim-client.env | grep CLIENT_SECRET | cut -d'=' -f2)" >> scim-client.env
  artifacts:
    reports:
      dotenv: scim-client.env
    paths:
      - scim-client.env
    expire_in: 1 hour

# Create LDAP extended attributes for SCIM tests
create-ldap-extended-attributes:
  stage: test
  extends: .check-variables
  dependencies:
    - configure-tests
  image: "gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/e2e-tests/e2e-tests-runner:${TESTRUNNER_VERSION}"
  variables:
    UDM_USERNAME: "Administrator"
    UDM_PASSWORD: $UDM_ADMIN_PASSWORD
  before_script:
    # Make sure not to override the before_script from .check-variables
    - !reference [".check-variables", "before_script"]
    # DEPLOY_SUBDOMAIN is modified in the .check-variables,before_script so we can't set in in variables
    - export UDM_URL="https://${DEPLOY_SUBDOMAIN}.portal.review.univention.dev/univention/udm/"
  script:
    - python3 ci/create-ldap-extended-attributes.py

# Run SCIM end-to-end tests
scim-e2e-test:
  stage: test
  extends: .check-variables
  needs:
    - job: create-scim-client
      artifacts: true
    - job: create-ldap-extended-attributes
  image: "gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/e2e-tests/e2e-tests-runner:${TESTRUNNER_VERSION}"
  variables:
    CLIENT_ID: "scim-client"
  before_script:
    # Make sure not to override the before_script from .check-variables
    - !reference [".check-variables", "before_script"]
    - source scim-client.env
    - export CLIENT_SECRET
    # DEPLOY_SUBDOMAIN is modified in the .check-variables,before_script so we can't set in in variables
    - export SCIM_BASE_URL="https://${DEPLOY_SUBDOMAIN}.scim.review.univention.dev/scim/v2"
    - export KEYCLOAK_BASE_URL="https://${DEPLOY_SUBDOMAIN}.id.review.univention.dev/realms/nubus/protocol/openid-connect/token"
  script:
    - echo "DEPLOY_SUBDOMAIN=${DEPLOY_SUBDOMAIN}"
    - pushd /e2e
    - >
      python
      tests/scim/scim_e2e_test.py

.pytest-base:
  dependencies:
    - configure-tests
  extends: .check-variables
  image: "gitregistry.knut.univention.de/univention/dev/nubus-for-k8s/e2e-tests/e2e-tests-runner:${TESTRUNNER_VERSION}"
  variables:
    JUNIT_XML: "test_results.xml"
    HTML_REPORT: "report.html"
    PLAYWRIGHT_RESULT_DIR: "playwright-results"
    PYTEST_EXPR: "acceptance_environment and not feature_toggle"
    RETRIES: "2"
    WAIT_SECS: "300"
  script:
    - pushd /e2e
    - >
      ./pytest_retry.py
      --retry "$RETRIES"
      --wait "$WAIT_SECS"
      --junitxml "$JUNIT_XML"
      --backup "$HTML_REPORT"
      --backup "$PLAYWRIGHT_RESULT_DIR"
      --
      ${TEST_PATH:-}
      -m "$PYTEST_EXPR"
      --showlocals
      --junitxml="$JUNIT_XML"
      --html="$HTML_REPORT"
      --self-contained-html
      --verbose
      --output="$PLAYWRIGHT_RESULT_DIR"
      --video=retain-on-failure
      --tracing=retain-on-failure
      --screenshot=only-on-failure
      || exit_code=$?
    - popd
    # NOTE: This is a workaround. Our testrunner image does not yet support to
    # run the tests in a different directory than "/e2e". So we copy the reports
    # back into the CI_PROJECT_DIR for Gitlab to accept them as artifacts.
    - mkdir -p "/e2e/$PLAYWRIGHT_RESULT_DIR"
    - cp -a "/e2e/$PLAYWRIGHT_RESULT_DIR" .
    - cp -a "/e2e/$HTML_REPORT" .
    - cp -a "/e2e/$JUNIT_XML" .
    - exit $exit_code
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/${HTML_REPORT}"
      - "${CI_PROJECT_DIR}/${JUNIT_XML}"
      - "${CI_PROJECT_DIR}/${PLAYWRIGHT_RESULT_DIR}/"
    when: "always"
    reports:
      junit: "$JUNIT_XML"
    expire_in: "1 week"

e2e-tests:
  stage: test
  extends: .pytest-base

# Concrete jobs for left_sidebar toggle
toggle:redeploy:left_sidebar:
  extends: .toggles:update-deployment
  needs:
    - job: configure-tests
      artifacts: true
    - job: e2e-tests
      optional: true
  variables:
    TOGGLE_NAME: "left_sidebar"
    TOGGLE_VALUE: "true"

toggle:test:left_sidebar:
  extends: .toggles:test
  needs:
    - job: configure-tests
      artifacts: true
    - toggle:redeploy:left_sidebar
  variables:
    TOGGLE_NAME: "left_sidebar"
    TOGGLE_VALUE: "true"

stop-deployment:
  stage: cleanup
  extends: .check-variables
  allow_failure: true
  needs:
    - deploy-gaia
  image: "ghcr.io/helmfile/helmfile:v0.167.1\
          @sha256:414cb074a0da0f457129590c39d96575fbdcdb7ce75bf0d2b30f05e835947d76"
  script:
    - >
      kubectl delete namespace "${DEPLOY_NAMESPACE}"
      --wait
      --timeout=600s
      --ignore-not-found
  variables:
    GIT_STRATEGY: none
  environment:
    name: ${CI_COMMIT_REF_SLUG}/nubus-with-extensions${ENVIRONMENT_SUFFIX}
    action: stop
  rules:
    - when: manual

cleanup-failed-deployment:
  extends: stop-deployment
  rules:
    - when: on_failure
